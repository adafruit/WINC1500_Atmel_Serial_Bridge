
WINC1500_FIRMWARE_UPDATE_PROJECT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  0000827c  2**0
                  CONTENTS
  2 .bss          0000001c  20000000  20000000  00010000  2**2
                  ALLOC
  3 .stack        00002004  2000001c  2000001c  00010000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0000827c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000082a4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00003b99  00000000  00000000  000082ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002a6  00000000  00000000  0000be98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000020  00000000  00000000  0000c13e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000048  00000000  00000000  0000c15e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  0000c1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00000800  00000000  00000000  0000c1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000f39  00000000  00000000  0000c9ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000854f5  00000000  00000000  0000d907  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000088  00000000  00000000  00092dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002020 	.word	0x20002020
   4:	00000115 	.word	0x00000115
   8:	00000111 	.word	0x00000111
   c:	00000111 	.word	0x00000111
	...
  2c:	00000111 	.word	0x00000111
	...
  38:	00000111 	.word	0x00000111
  3c:	00000111 	.word	0x00000111
  40:	00000111 	.word	0x00000111
  44:	00000111 	.word	0x00000111
  48:	00000111 	.word	0x00000111
  4c:	00000111 	.word	0x00000111
  50:	00000111 	.word	0x00000111
  54:	00000111 	.word	0x00000111
  58:	00000111 	.word	0x00000111
  5c:	00000111 	.word	0x00000111
  60:	00000111 	.word	0x00000111
  64:	00000111 	.word	0x00000111
  68:	00000111 	.word	0x00000111
  6c:	00000111 	.word	0x00000111
  70:	00000111 	.word	0x00000111
  74:	00000111 	.word	0x00000111
  78:	00000111 	.word	0x00000111
  7c:	00000111 	.word	0x00000111
  80:	00000111 	.word	0x00000111
  84:	00000111 	.word	0x00000111
  88:	00000111 	.word	0x00000111
  8c:	00000111 	.word	0x00000111
  90:	00000111 	.word	0x00000111
  94:	00000111 	.word	0x00000111
  98:	00000111 	.word	0x00000111
  9c:	00000111 	.word	0x00000111
  a0:	00000111 	.word	0x00000111
  a4:	00000111 	.word	0x00000111
  a8:	00000111 	.word	0x00000111
  ac:	00000111 	.word	0x00000111

000000b0 <__do_global_dtors_aux>:
  b0:	b510      	push	{r4, lr}
  b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
  b4:	7823      	ldrb	r3, [r4, #0]
  b6:	2b00      	cmp	r3, #0
  b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
  ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
  bc:	2b00      	cmp	r3, #0
  be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
  c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
  c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
  c4:	bf00      	nop
  c6:	2301      	movs	r3, #1
  c8:	7023      	strb	r3, [r4, #0]
  ca:	bd10      	pop	{r4, pc}
  cc:	20000000 	.word	0x20000000
  d0:	00000000 	.word	0x00000000
  d4:	0000027c 	.word	0x0000027c

000000d8 <frame_dummy>:
  d8:	b508      	push	{r3, lr}
  da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
  dc:	2b00      	cmp	r3, #0
  de:	d003      	beq.n	e8 <frame_dummy+0x10>
  e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
  e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
  e4:	e000      	b.n	e8 <frame_dummy+0x10>
  e6:	bf00      	nop
  e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
  ea:	6803      	ldr	r3, [r0, #0]
  ec:	2b00      	cmp	r3, #0
  ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
  f0:	bd08      	pop	{r3, pc}
  f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
  f4:	2b00      	cmp	r3, #0
  f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
  f8:	4798      	blx	r3
  fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
  fc:	00000000 	.word	0x00000000
 100:	0000027c 	.word	0x0000027c
 104:	20000004 	.word	0x20000004
 108:	0000027c 	.word	0x0000027c
 10c:	00000000 	.word	0x00000000

00000110 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
 110:	e7fe      	b.n	110 <Dummy_Handler>
 112:	46c0      	nop			; (mov r8, r8)

00000114 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 114:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 116:	4b2e      	ldr	r3, [pc, #184]	; (1d0 <Reset_Handler+0xbc>)
 118:	4a2e      	ldr	r2, [pc, #184]	; (1d4 <Reset_Handler+0xc0>)
 11a:	429a      	cmp	r2, r3
 11c:	d003      	beq.n	126 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 11e:	4b2e      	ldr	r3, [pc, #184]	; (1d8 <Reset_Handler+0xc4>)
 120:	4a2b      	ldr	r2, [pc, #172]	; (1d0 <Reset_Handler+0xbc>)
 122:	429a      	cmp	r2, r3
 124:	d304      	bcc.n	130 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 126:	4b2d      	ldr	r3, [pc, #180]	; (1dc <Reset_Handler+0xc8>)
 128:	4a2d      	ldr	r2, [pc, #180]	; (1e0 <Reset_Handler+0xcc>)
 12a:	429a      	cmp	r2, r3
 12c:	d310      	bcc.n	150 <Reset_Handler+0x3c>
 12e:	e01e      	b.n	16e <Reset_Handler+0x5a>
 130:	4a2c      	ldr	r2, [pc, #176]	; (1e4 <Reset_Handler+0xd0>)
 132:	4b29      	ldr	r3, [pc, #164]	; (1d8 <Reset_Handler+0xc4>)
 134:	3303      	adds	r3, #3
 136:	1a9b      	subs	r3, r3, r2
 138:	089b      	lsrs	r3, r3, #2
 13a:	3301      	adds	r3, #1
 13c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 13e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 140:	4823      	ldr	r0, [pc, #140]	; (1d0 <Reset_Handler+0xbc>)
 142:	4924      	ldr	r1, [pc, #144]	; (1d4 <Reset_Handler+0xc0>)
 144:	588c      	ldr	r4, [r1, r2]
 146:	5084      	str	r4, [r0, r2]
 148:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 14a:	429a      	cmp	r2, r3
 14c:	d1fa      	bne.n	144 <Reset_Handler+0x30>
 14e:	e7ea      	b.n	126 <Reset_Handler+0x12>
 150:	4a25      	ldr	r2, [pc, #148]	; (1e8 <Reset_Handler+0xd4>)
 152:	4b22      	ldr	r3, [pc, #136]	; (1dc <Reset_Handler+0xc8>)
 154:	3303      	adds	r3, #3
 156:	1a9b      	subs	r3, r3, r2
 158:	089b      	lsrs	r3, r3, #2
 15a:	3301      	adds	r3, #1
 15c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 15e:	2200      	movs	r2, #0
                *pDest++ = 0;
 160:	481f      	ldr	r0, [pc, #124]	; (1e0 <Reset_Handler+0xcc>)
 162:	2100      	movs	r1, #0
 164:	1814      	adds	r4, r2, r0
 166:	6021      	str	r1, [r4, #0]
 168:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 16a:	429a      	cmp	r2, r3
 16c:	d1fa      	bne.n	164 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 16e:	4a1f      	ldr	r2, [pc, #124]	; (1ec <Reset_Handler+0xd8>)
 170:	21ff      	movs	r1, #255	; 0xff
 172:	4b1f      	ldr	r3, [pc, #124]	; (1f0 <Reset_Handler+0xdc>)
 174:	438b      	bics	r3, r1
 176:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 178:	39fd      	subs	r1, #253	; 0xfd
 17a:	2390      	movs	r3, #144	; 0x90
 17c:	005b      	lsls	r3, r3, #1
 17e:	4a1d      	ldr	r2, [pc, #116]	; (1f4 <Reset_Handler+0xe0>)
 180:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 182:	481d      	ldr	r0, [pc, #116]	; (1f8 <Reset_Handler+0xe4>)
 184:	78c3      	ldrb	r3, [r0, #3]
 186:	2403      	movs	r4, #3
 188:	43a3      	bics	r3, r4
 18a:	2202      	movs	r2, #2
 18c:	4313      	orrs	r3, r2
 18e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 190:	78c3      	ldrb	r3, [r0, #3]
 192:	260c      	movs	r6, #12
 194:	43b3      	bics	r3, r6
 196:	2108      	movs	r1, #8
 198:	430b      	orrs	r3, r1
 19a:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 19c:	4b17      	ldr	r3, [pc, #92]	; (1fc <Reset_Handler+0xe8>)
 19e:	7b98      	ldrb	r0, [r3, #14]
 1a0:	2530      	movs	r5, #48	; 0x30
 1a2:	43a8      	bics	r0, r5
 1a4:	1c05      	adds	r5, r0, #0
 1a6:	2020      	movs	r0, #32
 1a8:	4328      	orrs	r0, r5
 1aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1ac:	7b98      	ldrb	r0, [r3, #14]
 1ae:	43b0      	bics	r0, r6
 1b0:	4301      	orrs	r1, r0
 1b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1b4:	7b99      	ldrb	r1, [r3, #14]
 1b6:	43a1      	bics	r1, r4
 1b8:	430a      	orrs	r2, r1
 1ba:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 1bc:	4a10      	ldr	r2, [pc, #64]	; (200 <Reset_Handler+0xec>)
 1be:	6851      	ldr	r1, [r2, #4]
 1c0:	2380      	movs	r3, #128	; 0x80
 1c2:	430b      	orrs	r3, r1
 1c4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 1c6:	4b0f      	ldr	r3, [pc, #60]	; (204 <Reset_Handler+0xf0>)
 1c8:	4798      	blx	r3

        /* Branch to main function */
        main();
 1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf4>)
 1cc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
 1ce:	e7fe      	b.n	1ce <Reset_Handler+0xba>
 1d0:	20000000 	.word	0x20000000
 1d4:	0000027c 	.word	0x0000027c
 1d8:	20000000 	.word	0x20000000
 1dc:	2000001c 	.word	0x2000001c
 1e0:	20000000 	.word	0x20000000
 1e4:	20000004 	.word	0x20000004
 1e8:	20000004 	.word	0x20000004
 1ec:	e000ed00 	.word	0xe000ed00
 1f0:	00000000 	.word	0x00000000
 1f4:	41007000 	.word	0x41007000
 1f8:	41005000 	.word	0x41005000
 1fc:	41004800 	.word	0x41004800
 200:	41004000 	.word	0x41004000
 204:	00000211 	.word	0x00000211
 208:	0000020d 	.word	0x0000020d

0000020c <main>:
#include "asf.h"

int main(void)
{
	while (1) {
	}
 20c:	e7fe      	b.n	20c <main>
 20e:	46c0      	nop			; (mov r8, r8)

00000210 <__libc_init_array>:
 210:	4b0e      	ldr	r3, [pc, #56]	; (24c <__libc_init_array+0x3c>)
 212:	b570      	push	{r4, r5, r6, lr}
 214:	2500      	movs	r5, #0
 216:	1c1e      	adds	r6, r3, #0
 218:	4c0d      	ldr	r4, [pc, #52]	; (250 <__libc_init_array+0x40>)
 21a:	1ae4      	subs	r4, r4, r3
 21c:	10a4      	asrs	r4, r4, #2
 21e:	42a5      	cmp	r5, r4
 220:	d004      	beq.n	22c <__libc_init_array+0x1c>
 222:	00ab      	lsls	r3, r5, #2
 224:	58f3      	ldr	r3, [r6, r3]
 226:	4798      	blx	r3
 228:	3501      	adds	r5, #1
 22a:	e7f8      	b.n	21e <__libc_init_array+0xe>
 22c:	f000 f816 	bl	25c <_init>
 230:	4b08      	ldr	r3, [pc, #32]	; (254 <__libc_init_array+0x44>)
 232:	2500      	movs	r5, #0
 234:	1c1e      	adds	r6, r3, #0
 236:	4c08      	ldr	r4, [pc, #32]	; (258 <__libc_init_array+0x48>)
 238:	1ae4      	subs	r4, r4, r3
 23a:	10a4      	asrs	r4, r4, #2
 23c:	42a5      	cmp	r5, r4
 23e:	d004      	beq.n	24a <__libc_init_array+0x3a>
 240:	00ab      	lsls	r3, r5, #2
 242:	58f3      	ldr	r3, [r6, r3]
 244:	4798      	blx	r3
 246:	3501      	adds	r5, #1
 248:	e7f8      	b.n	23c <__libc_init_array+0x2c>
 24a:	bd70      	pop	{r4, r5, r6, pc}
 24c:	00000268 	.word	0x00000268
 250:	00000268 	.word	0x00000268
 254:	00000268 	.word	0x00000268
 258:	0000026c 	.word	0x0000026c

0000025c <_init>:
 25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 25e:	46c0      	nop			; (mov r8, r8)
 260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 262:	bc08      	pop	{r3}
 264:	469e      	mov	lr, r3
 266:	4770      	bx	lr

00000268 <__init_array_start>:
 268:	000000d9 	.word	0x000000d9

0000026c <_fini>:
 26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 26e:	46c0      	nop			; (mov r8, r8)
 270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 272:	bc08      	pop	{r3}
 274:	469e      	mov	lr, r3
 276:	4770      	bx	lr

00000278 <__fini_array_start>:
 278:	000000b1 	.word	0x000000b1
